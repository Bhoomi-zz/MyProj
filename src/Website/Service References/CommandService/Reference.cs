//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Website.CommandService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CommandBase", Namespace="http://schemas.datacontract.org/2004/07/Ncqrs.Commanding")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Commands.ChangeNoteText))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Commands.CreateBrief))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Commands.ChangeBrief))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Commands.CreateBriefAllocation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Commands.EditBriefAllocation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Commands.CreatePlan))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Commands.EditPlan))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Commands.CreateRegionInPlan))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Commands.CreateOrChangeCitiesInPlan))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Commands.CreateOrChangeSitesInPlan))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Commands.ChangeDisplayInfoForSite))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Commands.ChangeMountingInfoForSite))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Commands.AssignVendorsToSite))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Commands.CreatePlanAlbum))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Commands.AddOrRemovePhotosFromPlanAlbum))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Commands.AddOrRemovePhotosFromPlanCity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Commands.AddOrRemovePhotosFromPlanSite))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Commands.CreateNewNote))]
    public partial class CommandBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid CommandIdentifierk__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<CommandIdentifier>k__BackingField", IsRequired=true)]
        public System.Guid CommandIdentifierk__BackingField {
            get {
                return this.CommandIdentifierk__BackingFieldField;
            }
            set {
                if ((this.CommandIdentifierk__BackingFieldField.Equals(value) != true)) {
                    this.CommandIdentifierk__BackingFieldField = value;
                    this.RaisePropertyChanged("CommandIdentifierk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CommandService.IMyNotesCommandService")]
    public interface IMyNotesCommandService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyNotesCommandService/CreateNewNote", ReplyAction="http://tempuri.org/IMyNotesCommandService/CreateNewNoteResponse")]
        void CreateNewNote(Commands.CreateNewNote command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyNotesCommandService/ChangeNoteText", ReplyAction="http://tempuri.org/IMyNotesCommandService/ChangeNoteTextResponse")]
        void ChangeNoteText(Commands.ChangeNoteText command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyNotesCommandService/CreateNewBrief", ReplyAction="http://tempuri.org/IMyNotesCommandService/CreateNewBriefResponse")]
        void CreateNewBrief(Commands.CreateBrief command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyNotesCommandService/ChangeBrief", ReplyAction="http://tempuri.org/IMyNotesCommandService/ChangeBriefResponse")]
        void ChangeBrief(Commands.ChangeBrief command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyNotesCommandService/CreateBriefAllocation", ReplyAction="http://tempuri.org/IMyNotesCommandService/CreateBriefAllocationResponse")]
        void CreateBriefAllocation(Commands.CreateBriefAllocation command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyNotesCommandService/ChangeBriefAllocation", ReplyAction="http://tempuri.org/IMyNotesCommandService/ChangeBriefAllocationResponse")]
        void ChangeBriefAllocation(Commands.EditBriefAllocation command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyNotesCommandService/CreatePlan", ReplyAction="http://tempuri.org/IMyNotesCommandService/CreatePlanResponse")]
        void CreatePlan(Commands.CreatePlan command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyNotesCommandService/ChangePlan", ReplyAction="http://tempuri.org/IMyNotesCommandService/ChangePlanResponse")]
        void ChangePlan(Commands.EditPlan command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyNotesCommandService/CreateRegionInPlan", ReplyAction="http://tempuri.org/IMyNotesCommandService/CreateRegionInPlanResponse")]
        void CreateRegionInPlan(Commands.CreateRegionInPlan command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyNotesCommandService/CreateOrChangeCitiesInPlan", ReplyAction="http://tempuri.org/IMyNotesCommandService/CreateOrChangeCitiesInPlanResponse")]
        void CreateOrChangeCitiesInPlan(Commands.CreateOrChangeCitiesInPlan command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyNotesCommandService/CreateOrChangeSitesInPlan", ReplyAction="http://tempuri.org/IMyNotesCommandService/CreateOrChangeSitesInPlanResponse")]
        void CreateOrChangeSitesInPlan(Commands.CreateOrChangeSitesInPlan command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyNotesCommandService/ChangeSiteDisplayInfo", ReplyAction="http://tempuri.org/IMyNotesCommandService/ChangeSiteDisplayInfoResponse")]
        void ChangeSiteDisplayInfo(Commands.ChangeDisplayInfoForSite command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyNotesCommandService/ChangeSiteMountingInfo", ReplyAction="http://tempuri.org/IMyNotesCommandService/ChangeSiteMountingInfoResponse")]
        void ChangeSiteMountingInfo(Commands.ChangeMountingInfoForSite command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyNotesCommandService/AssignVendorToSitesInfo", ReplyAction="http://tempuri.org/IMyNotesCommandService/AssignVendorToSitesInfoResponse")]
        void AssignVendorToSitesInfo(Commands.AssignVendorsToSite command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyNotesCommandService/CreatePlanAlbum", ReplyAction="http://tempuri.org/IMyNotesCommandService/CreatePlanAlbumResponse")]
        void CreatePlanAlbum(Commands.CreatePlanAlbum command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyNotesCommandService/AddOrRemovePhotosFromPlanAlbum", ReplyAction="http://tempuri.org/IMyNotesCommandService/AddOrRemovePhotosFromPlanAlbumResponse")]
        void AddOrRemovePhotosFromPlanAlbum(Commands.AddOrRemovePhotosFromPlanAlbum command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyNotesCommandService/AddOrRemovePhotosFromCity", ReplyAction="http://tempuri.org/IMyNotesCommandService/AddOrRemovePhotosFromCityResponse")]
        void AddOrRemovePhotosFromCity(Commands.AddOrRemovePhotosFromPlanCity command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyNotesCommandService/AddOrRemovePhotosFromPlanSite", ReplyAction="http://tempuri.org/IMyNotesCommandService/AddOrRemovePhotosFromPlanSiteResponse")]
        void AddOrRemovePhotosFromPlanSite(Commands.AddOrRemovePhotosFromPlanSite command);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyNotesCommandServiceChannel : Website.CommandService.IMyNotesCommandService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyNotesCommandServiceClient : System.ServiceModel.ClientBase<Website.CommandService.IMyNotesCommandService>, Website.CommandService.IMyNotesCommandService {
        
        public MyNotesCommandServiceClient() {
        }
        
        public MyNotesCommandServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MyNotesCommandServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyNotesCommandServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyNotesCommandServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CreateNewNote(Commands.CreateNewNote command) {
            base.Channel.CreateNewNote(command);
        }
        
        public void ChangeNoteText(Commands.ChangeNoteText command) {
            base.Channel.ChangeNoteText(command);
        }
        
        public void CreateNewBrief(Commands.CreateBrief command) {
            base.Channel.CreateNewBrief(command);
        }
        
        public void ChangeBrief(Commands.ChangeBrief command) {
            base.Channel.ChangeBrief(command);
        }
        
        public void CreateBriefAllocation(Commands.CreateBriefAllocation command) {
            base.Channel.CreateBriefAllocation(command);
        }
        
        public void ChangeBriefAllocation(Commands.EditBriefAllocation command) {
            base.Channel.ChangeBriefAllocation(command);
        }
        
        public void CreatePlan(Commands.CreatePlan command) {
            base.Channel.CreatePlan(command);
        }
        
        public void ChangePlan(Commands.EditPlan command) {
            base.Channel.ChangePlan(command);
        }
        
        public void CreateRegionInPlan(Commands.CreateRegionInPlan command) {
            base.Channel.CreateRegionInPlan(command);
        }
        
        public void CreateOrChangeCitiesInPlan(Commands.CreateOrChangeCitiesInPlan command) {
            base.Channel.CreateOrChangeCitiesInPlan(command);
        }
        
        public void CreateOrChangeSitesInPlan(Commands.CreateOrChangeSitesInPlan command) {
            base.Channel.CreateOrChangeSitesInPlan(command);
        }
        
        public void ChangeSiteDisplayInfo(Commands.ChangeDisplayInfoForSite command) {
            base.Channel.ChangeSiteDisplayInfo(command);
        }
        
        public void ChangeSiteMountingInfo(Commands.ChangeMountingInfoForSite command) {
            base.Channel.ChangeSiteMountingInfo(command);
        }
        
        public void AssignVendorToSitesInfo(Commands.AssignVendorsToSite command) {
            base.Channel.AssignVendorToSitesInfo(command);
        }
        
        public void CreatePlanAlbum(Commands.CreatePlanAlbum command) {
            base.Channel.CreatePlanAlbum(command);
        }
        
        public void AddOrRemovePhotosFromPlanAlbum(Commands.AddOrRemovePhotosFromPlanAlbum command) {
            base.Channel.AddOrRemovePhotosFromPlanAlbum(command);
        }
        
        public void AddOrRemovePhotosFromCity(Commands.AddOrRemovePhotosFromPlanCity command) {
            base.Channel.AddOrRemovePhotosFromCity(command);
        }
        
        public void AddOrRemovePhotosFromPlanSite(Commands.AddOrRemovePhotosFromPlanSite command) {
            base.Channel.AddOrRemovePhotosFromPlanSite(command);
        }
    }
}
